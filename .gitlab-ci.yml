stages:
  - get-version
  - build
  - deploy
  - release

get-version:
  stage: get-version
  tags:
    - kube
  image:
    name: "ubuntu:jammy"
  script:
    - VERSION=$(sed -n 's/__version__ = \"\(.*\)\"/\1/p' ./version.py)
    - echo "VERSION=${VERSION}" > version_info.txt
  artifacts:
    reports:
      dotenv: version_info.txt
  rules:
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
    - if: $CI_COMMIT_TAG
      when: never

build-shotgrid-leecher:
  stage: build
  dependencies:
    - get-version
  tags:
    - kube
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - CI_COMMIT_BRANCH_SAFE="${CI_COMMIT_BRANCH////-}" && echo "$CI_COMMIT_BRANCH_SAFE"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/services"
      --dockerfile "${CI_PROJECT_DIR}/services/leecher/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/ayon-shotgrid-leecher:${VERSION}"
  rules:
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      changes:
        - services/**/*
    - if: $CI_COMMIT_TAG
      when: never

build-shotgrid-processor:
  stage: build
  dependencies:
    - get-version
  tags:
    - kube
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - CI_COMMIT_BRANCH_SAFE="${CI_COMMIT_BRANCH////-}" && echo "$CI_COMMIT_BRANCH_SAFE"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/services"
      --dockerfile "${CI_PROJECT_DIR}/services/processor/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/ayon-shotgrid-processor:${VERSION}"
  rules:
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      changes:
        - services/**/*
    - if: $CI_COMMIT_TAG
      when: never

build-shotgrid-transmitter:
  stage: build
  dependencies:
    - get-version
  tags:
    - kube
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - CI_COMMIT_BRANCH_SAFE="${CI_COMMIT_BRANCH////-}" && echo "$CI_COMMIT_BRANCH_SAFE"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/services"
      --dockerfile "${CI_PROJECT_DIR}/services/transmitter/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/ayon-shotgrid-transmitter:${VERSION}"
  rules:
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      changes:
        - services/**/*
    - if: $CI_COMMIT_TAG
      when: never

.git-setup: &git-setup
  before_script:
    - apk add --no-cache git
    - URL_WITH_AUTH="https://gitlab-ci-token:${CI_TOKEN}@$(echo $CI_PROJECT_URL | sed 's|https://||')"
    - git clone "${URL_WITH_AUTH}.git" "${CI_COMMIT_SHA}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_LOGIN}"
    - cd "${CI_COMMIT_SHA}"
    - git checkout -B ${CI_COMMIT_BRANCH} remotes/origin/${CI_COMMIT_BRANCH} --

update-helm-chart:
  stage: deploy
  dependencies:
    - get-version
  tags:
    - kube
  extends: .git-setup
  image: alpine:latest
  script:
    # The last part of this syntax is to avoid replacing multiple 'tag' entries and just do it on the first one it finds
    # which in our values.yaml happens to be the 'ayon' artifact that we are interested in replacing
    - 'sed -i "/tag:.*/{s//tag: ${VERSION}/}" k8s/ayon_shotgrid/values.yaml'
    - 'sed -i "s/appVersion:.*/appVersion: ${VERSION}/" k8s/ayon_shotgrid/Chart.yaml'
    - git add k8s/ayon_shotgrid/values.yaml
    - git add k8s/ayon_shotgrid/Chart.yaml
    - git commit -m "Update Helm chart with new tag [ci skip]"
    - git diff-index --quiet HEAD || git commit -am '[skip ci] values.yml update'
    - git push origin "${CI_COMMIT_BRANCH}"
  rules:
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      changes:
        - services/**/*
    - if: $CI_COMMIT_TAG
      when: never
  when: on_success

release-patch:
  stage: release
  dependencies:
    - get-version
  tags:
    - kube
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - IMAGE_TAG=${VERSION}
    - >
      if release-cli get --tag-name "${IMAGE_TAG}"; then
        echo "Release "${IMAGE_TAG}" already exists, updating..."
        release-cli update --description "Release ${IMAGE_TAG} using CI pipeline $CI_PIPELINE_ID" --tag-name "${IMAGE_TAG}"
      else
        echo "Release "${IMAGE_TAG}" does not exist, creating..."
        release-cli create --description "Release ${IMAGE_TAG} using CI pipeline $CI_PIPELINE_ID" --tag-name "${IMAGE_TAG}"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      changes:
        - services/**/*
    - if: $CI_COMMIT_TAG
      when: never